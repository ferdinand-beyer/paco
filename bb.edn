{:deps {com.fbeyer/paco {:local/root "."}}
 :pods {clj-kondo/clj-kondo {:version "2023.12.15"}}
 :tasks {compile {:depends [javac]}
         javac (clojure "-T:build" "javac")

         check (run '-check:all #_{:parallel true})
         -check:all {:depends [check:clj-kondo check:eastwood]}

         check:clj-kondo {:requires ([pod.borkdude.clj-kondo :as clj-kondo])
                          :task (do
                                  (println "== clj-kondo ==")
                                  (clj-kondo/print! (clj-kondo/run! {:lint ["src"]})))}

         check:eastwood (clojure "-M:eastwood")

         test (run '-test:all #_{:parallel true})
         -test:all {:depends [test:clj test:cljs test:bb]}

         test:clj (let [args (cond-> ["-M:test:kaocha" "unit"]
                               (some #{"--coverage"} *command-line-args*) (conj "--plugin" "cloverage"))]
                    (println "Running Clojure tests...")
                    (apply clojure args))

         -prepare-kaocha-cljs {:requires ([babashka.fs :as fs])
                               :task (when-not (fs/directory? "node_modules/ws")
                                       (println "Installing `ws` package...")
                                       (shell "npm install --no-save ws"))}

         test:cljs {:depends [-prepare-kaocha-cljs]
                    :task (do
                            (println "Running ClojureScript tests...")
                            (clojure "-M:test:kaocha" "unit-cljs"))}

         test:bb {:extra-paths ["test"]
                  :extra-deps {lambdaisland/kaocha {:mvn/version "1.87.1366"}}
                  :requires ([kaocha.runner])
                  :task (do
                          (println "Running Babashka tests...")
                          (kaocha.runner/-main "unit"))}

         jar (clojure "-T:build" "jar")

         clean (clojure "-T:build" "clean")

         clj-kondo:init {:requires ([babashka.fs :as fs]
                                    [pod.borkdude.clj-kondo :as clj-kondo])
                         :task (let [opts {:cache true
                                           :copy-configs true
                                           :dependencies true
                                           :lint (->> (clojure "-A:bench:build:dev:kaocha:test" "-Spath")
                                                      with-out-str
                                                      fs/split-paths
                                                      (into [] (map str)))
                                           :parallel true}]
                                 (clj-kondo/print! (clj-kondo/run! opts)))}}}
