(ns comparse.error
  (:require [clojure.string :as str]))

(defprotocol IErrorMessage
  (-render [this]))

(deftype Expected [label]
  IErrorMessage
  (-render [_] (str "Expected: " label)))

(deftype ExpectedString [s]
  IErrorMessage
  (-render [_] (str "Expected: '" s "'")))

(deftype Unexpected [label]
  IErrorMessage
  (-render [_] (str "Unexpected: " label)))

(deftype UnexpectedString [s]
  IErrorMessage
  (-render [_] (str "Unexpected: '" s "'")))

(deftype Message [msg]
  IErrorMessage
  (-render [_] msg))

(deftype Nested [pos user-state errors]
  IErrorMessage
  (-render [_] "<nested>"))

(deftype Compound [label pos user-state errors]
  IErrorMessage
  (-render [_] "<compound>"))

(defn expected
  "The input does not match the expected input.

   `label` describes the expected input."
  [label]
  (list (Expected. label)))

;; fparsec: + ExpectedCaseInsensitiveString
(defn expected-str
  "The input does not match an expected string constant."
  [str]
  (list (ExpectedString. str)))

(defn unexpected
  "The parser encountered some unexpected input."
  [label]
  (list (Unexpected. label)))

;; fparsec: + UnexpectedCaseInsensitiveString
(defn unexpected-str
  "The parser encountered some unexpected input."
  [str]
  (list (UnexpectedString. str)))

(defn message
  "The error does not fit the other types."
  [msg]
  (list (Message. msg)))

(defn nested
  "Backtracked after an error occurred."
  [pos user-state errors]
  (list (Nested. pos user-state errors)))

(defn compound
  "Mainly generated by compound-labelling operator."
  [label pos user-state errors]
  (list (Compound. label pos user-state errors)))

;; fparsec: + Other

(def ^:private eof-label "end of input")
(def unexpected-eof (unexpected eof-label))
(def expected-eof (expected eof-label))

;; fparsec: ToHashSet, ToSortedArray
;; Duplicate error messages and empty Expected...,
;; Unexpected... and Message messages are filtered out

(defn render-errors [errors]
  ;; TODO: Sort/dedupe
  ;; TODO: combine with "or" / "one of"
  (str/join ", " (map -render errors)))

;; TODO: Pretty-printing with source line and ^ marker
